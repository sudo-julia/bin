#!/usr/bin/env bash
set -eo pipefail

# update system on arch, calls aur sep w extra util for aux programs (date-based) at end
# requires informant, pacman-contrib and yay

# change the user you're updating for here
user=jam
# if you want extra updates to run automatically, place the file to read them from here
# if this is unset, the program will ask if you'd like to update extras every time it's run
path_to_lastdate=/home/"${user}"/bin/.lastDate

# TODO Add updater for cargo and check for failures
#      this can be `if [ cmd ]; then \nprintf --'cmd updated\n'`
#### CARGO UPDATER PSEUDOCODE
# if "~/.cargo" exists; then
#     for dir that is not in {'bin', 'git', 'registry'}:
#         (cd "${DIR}" && cargo update)
# else
#     :


extraUpdates () {
    sudo -u "${user}" zsh /home/"${user}"/bin/runZinit.zsh
    sudo -u "${user}" /usr/bin/tldr --update > /dev/null && \
	printf -- 'Tldr cache updated.\n'
	sudo -u "${user}" vim +PluginInstall +qall
	printf -- 'Vim plugins updated.\n'
	sudo -u "${user}" /home/"${user}"/bin/updatePip.bash
	printf -- 'Npm updated.\n'
	paccache -d
	printf -- ':: Clear pacman cache? [Y/n] '; read -r response
	case "$response" in
		y|Y)
			paccache -rv
			printf -- 'Pacman cache cleared.\n'  ;;
		*)
			printf -- 'Skipping pacman cache.\n'
		esac
    /home/"${user}"/bin/getInstalled.bash
	if [[ "${1}" ]]; then
		echo "${1}" >> /home/"${user}"/bin/.lastDate
		printf -- '\nNext full update will run on or after %d.\n' "${2}"
	fi
	printPacdiff
}


monthCheck () {
	currentMonth=$( echo "${currentDate}" | cut -c4-5 )
	newYear=$( echo "${currentDate}" | cut -c1-2 )
	newMonth="$(( currentMonth + 1 ))"
	if (( newMonth > 12 )); then
		newMonth=1
		newYear=$(( newYear + 1 ))
	fi
	days_thirtyone=(01 03 05 07 08 10 12)
	if [[ "${currentMonth}" =~ ${days_thirtyone[*]} ]]; then
		difference="$(( currentDateLast - 31 ))"
	else
		difference="$(( currentDateLast - 30 ))"
	fi
	newDate="${newYear}${newMonth}${difference}"
	echo "${newDate}"
}


printPacdiff () {
	if [[ "${PACDIFF_RUN}" -eq 0 ]] && [[ -s /tmp/pacnew.out ]]; then
		printf -- '\n%s\n%s\n' "Pacnew files:" "$( cat /tmp/pacnew.out )"
		PACDIFF_RUN=1
		return
	else
		:
	fi
	return
}


PACDIFF_RUN=0


if [[ "$( id -u )" -ne 0 ]]; then
	printf -- '%s\n%s\n' "Error! Run as root." "Cancelling."
	exit 1
fi

informant check; INF_UPDATES=$?
if [[ ${INF_UPDATES} -ne 0 ]]; then
	informant list
	printf -- 'Read new bulletins? '; read -r response
	case "$response" in
	    y|Y)
		informant read	;;
	    *)
		printf -- '%s\n' "Skipping read."
	esac
else
    printf -- '%s\n' "No updates to Arch News."
fi

printf -- ':: Proceed with main update? [Y/n] '; read -r response
case "$response" in
    y|Y)
	pacman -Syu
	pacdiff -o > /tmp/pacnew.out
	printf -- ':: Also update AUR packages? [Y/n] '; read -r response
	case "$response" in
	    y|Y)
		sudo -u "${user}" paru -Sua  ;;
	    *)
		printf -- 'Skipping AUR packages.\n'
	esac ;;
    *)
	printf -- 'Cancelling update.\n'
	exit 0
esac
printPacdiff

if [[ ! "${path_to_lastdate}" ]]; then
	printf 'Update other programs? '; read -r response
	response=$( echo "${response}" | tr '[:upper:]' '[:lower:]' )
	if [[ "${response}" == y ]] || [[ "${response}" = yes ]]; then
		extraUpdates
	else
		printf -- '%s\n' "Skipping extra updates."
	fi
	exit 0
elif [[ "${path_to_lastdate}" ]] && [[ ! -s "${path_to_lastdate}" ]]; then
	# if variable is set but file doesn't exist, create it
	echo '000000' > "${path_to_lastdate}"
fi

if [[ -s "${path_to_lastdate}" ]]; then
	currentDate=$( date "+%y%m%d" )
	currentDateLast=$( echo "${currentDate}" | cut -c5- )
	if (( currentDateLast > 31 )); then
		nextDate=$( monthCheck )
	else
		nextDate=$(( currentDate + 7 ))
	fi
	if [[ "${currentDate}" -ge "${nextDate}" ]]; then
		extraUpdates "${currentDate}" "${nextDate}"
	fi
fi

exit 0
