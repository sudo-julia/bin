#!/usr/bin/env bash
set -eo pipefail

# update system on arch, calls aur sep w extra util for aux programs (date-based) at end
# requires informant, pacman-contrib and yay


# TODO check for installed programs before extraUpdates
# TODO offer to remove orphan packages along with cache
# TODO Add updater for cargo and check for failures
#      this can be `if [ cmd ]; then \nprintf --'cmd updated\n'`
#### CARGO UPDATER PSEUDOCODE
# if "~/.cargo" exists; then
#     for dir that is not in {'bin', 'git', 'registry'}:
#         (cd "${DIR}" && cargo update)
# else
#     :


extraUpdates () {
	# update extra programs and non-arch package managers
	if [[ ! "${user}" ]]; then
		return 1
	fi
    sudo -u "${user}" zsh /home/"${user}"/bin/runZinit.zsh
    sudo -u "${user}" /usr/bin/tldr --update > /dev/null && \
	printf -- 'Tldr cache updated.\n'
	sudo -u "${user}" vim +PluginInstall +qall
	printf -- 'Vim plugins updated.\n'
	sudo -u "${user}" /home/"${user}"/bin/updatePip.bash
	printf -- 'Npm updated.\n'
	paccache -d
	printf -- ':: Clear pacman cache? [Y/n] '; read -r response
	case "$response" in
		y|Y)
			paccache -rv
			printf -- 'Pacman cache cleared.\n'  ;;
		*)
			printf -- 'Skipping pacman cache.\n'
		esac
    /home/"${user}"/bin/getInstalled.bash
	if [[ "${1}" ]]; then
		echo "${1}" >> /home/"${user}"/bin/.lastDate
		printf -- '\nNext full update will run on or after %d.\n' "${2}"
	fi
}


lastDateCheck() {
	if [[ ! "${pathToLastDate}" ]]; then
		# if the user doesn't want to make lastDate file
		printf 'Update other programs? '; read -r response
		case "${response}" in
			y|Y)
				extraUpdates ;;
			*)
				printf -- '%s\n' "Skipping extra updates."
		esac
	elif [[ "${pathToLastDate}" ]] && [[ ! -s "${pathToLastDate}" ]]; then
		# if variable is set but file doesn't exist, create it
		echo '000000' > "${pathToLastDate}"
	elif [[ -s "${pathToLastDate}" ]]; then
		# check date to see if it's been a week since the last update
		lastDate=$( tail -n1 "${pathToLastDate}" )
		currentDate=$( date "+%y%m%d" )
		currentDateLast=$( echo "${currentDate}" | cut -c5- )
		if (( currentDateLast >= 26 )); then
			nextDate=$( monthCheck )
		else
			nextDate=$(( lastDate + 7 ))
		fi
		if [[ "${currentDate}" -ge "${nextDate}" ]]; then
			extraUpdates "${currentDate}" "${nextDate}"
	fi
fi
}


mainUpdate() {
	printf -- ':: Begin main update? [Y/n] '; read -r response
	case "$response" in
		y|Y)
			pacman -Syu
			pacdiff -o > /tmp/pacnew.out
			if [[ ! "${user}" ]]; then
				exit 0
			else
				printf -- ':: Also update AUR packages? [Y/n] '; read -r response
				case "$response" in
					y|Y)
						sudo -u "${user}" yay -Syua  ;;
					*)
						printf -- 'Skipping AUR packages.\n'
				esac
			fi  ;;
		*)
			printf -- 'Cancelling update.\n'
			exit 0
	esac
}


monthCheck () {
	# check the month and fix any incorrectly formatted dates
	currentMonth=$( echo "${currentDate}" | cut -c4-5 )
	newYear=$( echo "${currentDate}" | cut -c1-2 )
	newMonth="$(( currentMonth + 1 ))"
	if (( newMonth > 12 )); then
		newMonth=1
		newYear=$(( newYear + 1 ))
	fi
	days_thirtyone=(01 03 05 07 08 10 12)
	if [[ "${currentMonth}" =~ ${days_thirtyone[*]} ]]; then
		difference="$(( currentDateLast - 31 ))"
	else
		difference="$(( currentDateLast - 30 ))"
	fi
	newDate="${newYear}${newMonth}${difference}"
	echo "${newDate}"
}


printPacdiff () {
	# print out any pacnew files
	if [[ "${PACDIFF_RUN}" -eq 0 ]] && [[ -s /tmp/pacnew.out ]]; then
		printf -- '\n%s\n%s\n' "Pacnew files:" "$( cat /tmp/pacnew.out )"
		PACDIFF_RUN=1
	fi
	return
}


rootCheck() {
	if [[ "$( id -u )" -ne 0 ]]; then
		printf -- '%s\n%s\n' "Error! Run as root." "Cancelling."
		exit 1
	fi
}


PACDIFF_RUN=0

if getent passwd "jam" > /dev/null; then
	user=jam
	pathToLastDate=/home/"${user}"/bin/.lastDate
else
	# if this is unset, the program will ask if you'd like to update extras every time it's run
	# change the user you're updating for here
	user=
	# if you want extra updates to run automatically, place the file to read them from here
	pathToLastDate=
fi

# exit program if not run as root
rootCheck

mainUpdate

lastDateCheck

printPacdiff

exit 0
