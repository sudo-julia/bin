#!/bin/sh
# update system on FreeBSD

# get the current user to execute commands as
user="${SUDO_USER}"

# find the user's home dir for script locations
user_home="$(getent passwd "${SUDO_USER}" | cut -d':' -f6)"

update_system() {
  # run the main update
  set -e
  pkg update
  pkg upgrade
}

update_extras() {
  # update extra programs and non-arch package managers
  # if you don't want to use any of these, simply delete or comment-out the line
  if hash tldr >/dev/null; then
    sudo -u "${user}" /usr/bin/env tldr --update |
      sed 's/ cache/ tldr cache/'
  fi
  update_vim_plugins
  update_luarocks
  "${user_home}/bin/get-installed"
  if [ "$#" ]; then
    echo "$1" >"${user_home}/bin/.last_date"
    printf -- '\nNext full update will run after %s.\n' "$2"
  fi
}

update_luarocks() {
  # update luarocks packages
  if [ "$(luarocks list --outdated | wc -l)" -le 4 ]; then
    printf -- 'No luarocks package to upgrade.\n'
    return
  fi
  printf -- 'Updating luarocks packages...\n'
  for pkg in $(luarocks list --outdated | tail -n+5 | sed '/^\s*$/d' | sed -n 'p;n'); do
    luarocks install "$pkg"
  done
  printf -- 'Luarocks packages upgraded.\n'
}

update_pip() {
  # get the python version
  python_ver="$(env pip --version | grep -Eo 'python[2-3]\.\b([0-9]|1[0-2])\b')"
  # set the output location for installed packages at runtime
  output_loc="${HOME}/.local/lib/${python_ver}/installed/$(date +'%Y-%m-%dT%H:%M:%S')"

  # checks if output folder exists by removing the filename with substring extraction
  output_parent="$(echo "$output_loc" | cut -d'/' -f1-7)"
  # TODO: account for /usr/home
  if [ ! -d "$output_parent" ]; then
    mkdir "$output_parent"
  fi

  # upgrade pip packages by listing and filtering outdated packages, then
  # feeding them to pip with xargs
  printf -- '%s\n' "Upgrading pip packages..."
  env pip list --user -o |
    grep -v '\^-e' |
    tee "${output_loc} " |
    grep -Ev 'sdist|--|Latest\s' |
    cut -d' ' -f1 |
    xargs -r -n1 env pip install --user -U &&
    printf -- '\n%s\n' "Pip packages upgraded."
  return 0
}

update_vim_plugins() {
  # set your vim plugin manager's commands here
  printf -- 'Updating NeoVim plugins...\n'
  sudo -u "${user}" nvim --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync'
  printf -- 'NeoVim plugins updated.\n'
}

check_root() {
  # exit program if not run as root
  if [ "$(id -u)" -eq 0 ]; then
    tput setaf 1
    printf -- 'Error! Run as root.\nCancelling...\n' >&2
    tput sgr0
    exit 1
  fi
}

get_user_input() {
  # get user confirmation for an action
  # args are: 1 - prompt, 2 - action if yes, 3 - action if no
  printf -- '%s' "$1"; read -r confirm
  case "$confirm" in
  y | Y)
    $2
    ;;
  *)
    printf -- '%s\n' "$3"
    ;;
  esac
}

main() {
  check_root
  update_system
  check_last_date
}

main

exit 0
