#!/usr/bin/env bash
# update system on arch, calls aur sep w extra util for aux programs (date-based) at end
# requires informant, pacman-contrib and either paru or yay
set -o pipefail

# set this to paru or yay
aur_helper="yay"

# if you want extra updates to run on a timer, add a file to this line
last_date="${user_home}/bin/.lastDate"

# counter for if pacdiff has been run yet
pacdiff_run=0 # dont change this

# get the current user to execute commands as
user="${SUDO_USER}"

# find the user's home dir for script locations
user_home="$( getent passwd "${SUDO_USER}" | cut -d':' -f6 )"


update_system() {
	# run the main update
	set -e
	informant check
	read -rp ":: Begin main update? [Y/n] " response
	case "$response" in
		y|Y)
			pacman -Syu
			pacdiff -o > /tmp/pacnew.out
			get_user_input \
			":: Also update AUR packages? [Y/n] " \
			"sudo -u ${user} ${aur_helper} -Syua"\
			"Skipping AUR packages"
			;;
		*)
			printf -- '%s\n' "Cancelling update."
			exit 0
	esac
}

update_extras() {
	# update extra programs and non-arch package managers
	# if you don't want to use any of these, simply delete or comment-out the line
	if [[ -s "${user_home}/bin/upgrade_zinit" ]] \
	&& [[ -s "${user_home}/bin/upgrade_pip" ]]; then
		sudo -u "${user}" zsh "${user_home}/bin/upgrade-zinit"
		sudo -u "${user}" "${user_home}/bin/upgrade-pip"
	fi
	if hash tldr >/dev/null; then
		sudo -u "${user}" /usr/bin/tldr --update \
		| sed 's/ cache/ tldr cache/'
	fi
	update_vim_plugins
	remove_orphans
	clear_paccache
	"${user_home}/bin/get-installed"
	if [[ "$#" ]]; then
		echo "$1" >> "${user_home}/bin/.lastDate"
		printf -- '\nNext full update will run on or after %d.\n' "$2"
	fi
}

update_vim_plugins() {
	# set your vim plugin manager's commands here
	printf -- '%s\n' "Updating NeoVim plugins..."
	sudo -u "${user}" nvim +PlugUpdate \
	&& sudo -u "${user}" nvim +PlugUpgrade \
	&& printf -- '%s\n' "NeoVim plugins updated."
}

remove_orphans() {
	# remove orphaned pacman packages
	if pacman -Qdtq >/dev/null; then
		printf -- '\n%s\n' "Orphaned packages are:"
		pacman -Qdt
		get_user_input \
		":: Remove orphan packages? [Y/n] " \
		"pacman -Rns --noconfirm $( pacman -Qdtq )" \
		"Leaving orphaned packages."
	else
		printf -- '%s\n' "No orphaned packages."
	fi
}

clear_paccache() {
	# get_user_input isn't in use because it borks the cache-clearing
	printf -- '%s\n' "Checking pacman cache for old packages..."
	paccache -d
	read -rp ":: Clear pacman cache? [Y/n] " confirm
	case "$confirm" in
		y|Y)
			paccache -rv && printf -- '%s\n' "Pacman cache cleared."
			;;
		*)
			printf -- '%s\n' "Skipping pacman cache."
	esac
}

check_last_date() {
	# check if it's time to run update_extras
	if [[ -z "${last_date}" ]]; then
		# if the user doesn't want to make lastDate file
		get_user_input \
		":: Update other programs? " \
		"update_extras" \
		"Skipping extra updates."
	elif [[ -n "${last_date}" ]] && [[ ! -s "${last_date}" ]]; then
		# if variable is set but file doesn't exist, create it
		echo '000000' > "${last_date}"
	elif [[ -s "${last_date}" ]]; then
		# check date to see if it's been a week since the last update
		lastDate="$( tail -n1 "${last_date}" )"
		currentDate="$( date "+%Y%m%d" )"
		currentDateLast="${currentDate:6}"
		# if (( currentDateLast >= 26 )); then
		#	 nextDate=$( check_month )
		# else
		#	 nextDate=$(( lastDate + 7 ))
		# fi
		nextDate=$(( lastDate + 7 ))
		if (( currentDate >= nextDate )); then
			update_extras "${currentDate}" "${nextDate}"
		fi
	fi
}

# TODO s(he's) br(ok)en
check_month() {
	# check the month and fix any incorrectly formatted dates
	currentMonth="${currentDate:4:2}"
	newYear="${currentDate:0:4}"
	newMonth=$(( currentMonth + 1 ))
	if (( newMonth > 12 )); then
		newMonth=1
		newYear=$(( newYear + 1 ))
	fi
	declare -a days_thirtyone
	days_thirtyone=(01 03 05 07 08 10 12)
	if [[ "${currentMonth}" =~ ${days_thirtyone[*]} ]]; then
		difference=$(( 7 - ( 31 - currentDateLast ) ))
	else
		difference=$(( 7 - ( 30 - currentDateLast ) ))
	fi
	if [[ "${#difference}" -eq 1 ]]; then
		difference=0${difference}
	fi
	newDate="${newYear}${newMonth}${difference}"
	echo "${newDate}"
}

check_root() {
	# exit program if not run as root
	set -o pipefail
	if (( "$( id -u )" != 0 )); then
		tput setaf 1
		printf -- '%s\n%s\n' "Error! Run as root." "Cancelling." >&2
		tput sgr0
		exit 1
	fi
}

get_user_input() {
	# get user confirmation for an action
	# args are: 1 - prompt, 2 - action if yes, 3 - action if no
	read -rp "$1" confirm
	case "$confirm" in
		y|Y)
			$2
			;;
		*)
			printf -- '%s\n' "$3"
	esac
}

print_pacdiff() {
	# print out any pacnew files
	if (( pacdiff_run == 0 )) && [[ -s "/tmp/pacnew.out" ]]; then
		printf -- '\n%s\n%s\n' "Pacnew files:" "$( cat /tmp/pacnew.out )"
		pacdiff_run=1
	fi
}

main() {
	check_root
	update_system
	# update_extras
	check_last_date
	print_pacdiff

	# unset all variables
	unset aur_helper
	unset last_date
	unset pacdiff_run
	unset user
	unset user_home
}

main

exit 0
