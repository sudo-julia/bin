#!/usr/bin/env python3
"""create or edit a note file"""
import argparse
from datetime import date
from os import getenv
from pathlib import Path
import subprocess
from sys import stderr
from tempfile import NamedTemporaryFile


def create_note(file, editor):
    """create a note"""
    try:
        Path(file).parent.mkdir(parents=True)
        subprocess.run([editor, "--", file], check=True)
    except PermissionError as err:
        raise PermissionError from err
    except subprocess.CalledProcessError as err:
        raise NotImplementedError from err


def select_note(note_dir, prompt):
    """select a note"""
    notes = {}
    cmd = "cat {} | fzf +m --ansi --prompt='{}' --preview='cat {}/{}'"
    for note in Path(note_dir).glob("*"):
        notes[str(Path(note).parent)] = note

    tmpfile = NamedTemporaryFile(mode="w+")
    try:
        with open(tmpfile.name, "w+") as tmp:
            # add note options to tmpfile for piping
            for note in notes:
                tmp.write(note)
            selected_note = subprocess.check_output(
                cmd.format(tmpfile.name, prompt, note_dir),
                shell=True,
            )
    except subprocess.CalledProcessError as err:
        # TODO: detect if failure somewhere OR user just didn't pick an option
        raise NotImplementedError from err
    else:
        tmpfile.close()

    return str(selected_note)


def print_error(msg):
    """print an error message"""
    print(msg, file=stderr)


def main():
    """main"""
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-d", "--delete", action="store_true", help="Delete an existing note"
    )
    parser.add_argument(
        "-e", "--edit", action="store_true", help="Edit an existing note"
    )
    parser.add_argument(
        "-f",
        "--filetype",
        default="md",
        help="Set the filetype of the new note (default: markdown)",
    )
    parser.add_argument(
        "--editor",
        default=getenv("EDITOR"),
        help="Chose the editor to use. (default: $EDITOR)",
    )
    parser.add_argument(
        "--note_dir",
        default=f"{getenv('HOME')}/documents/notes",
        help="Directory to store the note in",
    )
    parser.add_argument(
        "note",
        nargs="?",
        default=str(date.today),
        help="The name of the note (default: today's date)",
    )

    args = parser.parse_args()
    if args.delete:
        try:
            note = select_note(args.note_dir, "delete >")
            Path(note).unlink()
            print(f"Deleted '{note}'")
            return
        except:
            raise NotImplementedError
    elif args.edit:
        note = select_note(args.note_dir, "edit >")
    else:
        note = f"{args.note_dir}/{args.note}.{args.filetype}"

    create_note(note, args.editor)


if __name__ == "__main__":
    main()
