#!/usr/bin/env bash
# preview a pdf
# depends on: pandoc, wget (optional)
# Copyright (c) 2021 Julia

version="1.1.1"

preview() {
	# make a temporary file, view it and remove it once viewed
    local outputFile
	if [[ "${1:(-3)}" == pdf ]]; then
		xdg-open "$1" &
		return
	fi

    # set the output file based on if it'll be saved or not
    if [[ "${preserve}" ]]; then
		outputFile="${1%.*}.pdf"
	else
		outputFile="$( mktemp --suffix='.pdf' )"
	fi

    # convert and open the file, exit on failure
	pandoc --quiet "$1" -o "${outputFile}" 2>/dev/null || printError "$1 does not exist!"
    xdg-open "${outputFile}" # FIXME (jam) why won't this run in the background?
    if [[ ! "$preserve" ]]; then
        rm -f -- "${outputFile}"
    fi
}

getFile() {
    # download a file
    local downloadedFile
    if [[ "$preserve" ]];  then
        # trim the url name to the specific file, and replace any extension with html
        # this exists to remove html anchors from the filename
        local tmp="${1##*/}"
        downloadedFile="${tmp%.*}.html"
        unset tmp
    else
        downloadedFile="$( mktemp --suffix='.html' )"
    fi

    wget -q "$1" -O "${downloadedFile}"
    echo "${downloadedFile}"
}

main() {
    checkDeps

	# check for arguments and run preview() on every valid file given
    parseArgs "$@"

    # TODO (jam) option to combine files into one pdf (pandoc -s)
    # TODO (jam) option to select pdf viewer
    # TODO (jam) change the link arg to take every argument as a link (or detect?)

    # declare arrays for args and opts, sort provided arguments accordingly
    declare -a args opts
    for arg in "$@"; do
        if [[ "${downloadFrom}" && "${arg}" == "${downloadFrom}" ]]; then
            # remove download link from args
            continue
        fi
        if [[ $arg == [-]* ]]; then
            opts+=("$arg")
        else
            args+=("$arg")
        fi
    done

    # if the keep flag is present, set a variable to give better output filenames
	if [[ "${opts[*]}" == *"-k"* ]]; then
        preserve=true
	fi

    # if the link flag is present, download the file from the given link
    if [[ "${opts[*]}" == *"-l"* ]]; then
        pFile="$( getFile "$downloadFrom" )"
        args+=("$pFile")
    fi

    # if the user provided files to operate on, iterate through them
    local preview_file 
    if (( "${#args[@]}" > 0 )); then
		for f in "${args[@]}"; do
			if [[ -s "${f}" ]]; then
				preview "${f}"
			else
				printError "Cannot access file '${f}'"
			fi
			shift
		done
    # otherwise, select files interactively
	else
		preview_file="$( find "." -type f | fzf +m )" || exit 0
		preview "${preview_file}"
	fi
}

checkDeps() {
    # check dependencies
    for com in pandoc wget; do
        hash "$com" 2>/dev/null || printError "$com needs to be installed to run pvw."
    done
}

printError() {
    # print errors to stderr
	tput setaf 1
	printf -- '[ERR] %s\n' "$1" >&2
	tput sgr0
    exit 1
}

usage() {
    # usage
    cat << EOF
Usage: preview [<args>] [file]

Arguments are:
    -h, --help     Display this help
    -k, --keep     Save the generated pdf
    -l, --link     Preview a file directly from a link
    -r, --readme   Preview the README of the current directory
    -v, --version  Display version information
EOF
exit 0
}

parseArgs() {
    # parse arguments
	TEMP="$( getopt -o 'hkl:rv' -l 'help,keep,link:,readme,version' -n "pvw" -- "$@" )"
	eval set -- "$TEMP"
	unset TEMP

	while true; do
		case "$1" in
			'-h'|'--help')
                usage
				;;
			'-k'|'--keep')
                shift
                continue
				;;
            '-l'|'--link')
                downloadFrom="$2"
                shift 2
                continue
                ;;
            '-r'|'--readme')
                preview "./README.md"
                exit 0
                ;;
            '-v'|'--version')
                printf -- 'pvw v%s\n' "$version"
                exit 0
                ;;
			'--')
				shift
				break
				;;
			*)
				printError "$2 is not a recognized argument"
		esac
	done
}

main "$@"
exit 0
