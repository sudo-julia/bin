#!/usr/bin/env bash
# preview a pdf
# Copyright (c) 2021 Julia

preview() {
	# make a temporary file, view it and remove it once viewed
    local output_file
	if [[ "${1:(-3)}" == pdf ]]; then
		zathura -- "$1"
		return
	fi

    # set the output file based on if it'll be saved or not
    if [[ "${preserve}" ]]; then
		output_file="${1%.*}.pdf"
	else
		output_file="$( mktemp --suffix='.pdf' )"
	fi

    # convert and open the file, exit on failure
	pandoc "$1" -o "${output_file}" 2>/dev/null || print_error "$1 does not exist!"
	zathura -- "${output_file}" || print_error "Operation failed!"
    if [[ ! "$preserve" ]]; then
        rm -f -- "${output_file}"
    fi
}

main() {
	# check for arguments and run preview() on every valid file given
    parse_args "$@"

    # declare arrays for args and opts, sort provided arguments accordingly
    declare -a args opts
    for arg in "$@"; do
        if [[ $arg == [-]* ]]; then
            opts+=("$arg")
        else
            args+=("$arg")
        fi
    done

    # if the keep flag is present, set a variable to give better output filenames
	if [[ "${opts[*]}" == *"-k"* ]]; then
        preserve=true
	fi

    # if the user provided files to operate on, iterate through them
    local preview_file 
    if (( "${#args[@]}" > 0 )); then
		for f in "${args[@]}"; do
			if [[ -s "${f}" ]]; then
				preview "${f}"
			else
				print_error "Cannot access file '${f}'"
			fi
			shift
		done
    # otherwise, select files interactively
	else
		preview_file="$( find "." -type f | fzf +m )" || exit 0
		preview "${preview_file}"
	fi
}

print_error() {
    # print errors to stderr
	tput setaf 1
	printf -- '[ERR] %s\n' "$1" >&2
	tput sgr0
    exit 1
}

usage() {
    # usage
    cat << EOF
Usage: preview [<args>] [file]

Arguments are:
    -h, --help     Display this help
    -k, --keep     Save the generated pdf
    -r, --readme   Preview the README of the current directory
    -v, --version  Display version information
EOF
exit 0
}

parse_args() {
    # parse arguments
	TEMP="$( getopt -o 'hkrv' -l 'help,keep,readme,version' -n "pvw" -- "$@" )"
	eval set -- "$TEMP"
	unset TEMP

	while true; do
		case "$1" in
			'-h'|'--help')
                usage
				;;
			'-k'|'--keep')
                shift
                continue
				;;
            '-r'|'--readme')
                preview "./README.md"
                exit 0
                ;;
            '-v'|'--version')
                printf -- 'pvw v1\n'
                exit 0
                ;;
			'--')
				shift
				break
				;;
			*)
				print_error "$2 is not a recognized argument"
		esac
	done
}

main "$@"
exit 0
